import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from datetime import datetime
from tkinter import filedialog

def show_message(message):
    messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", message)

def show_notifications():
    notifications_window = tk.Toplevel(app)
    notifications_window.title("–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    notifications_window.config(bg="#2c3e50")
    notifications_window.geometry("800x400")
    
    title_label = tk.Label(notifications_window, text="–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", font=("Helvetica", 14, "bold"), bg="#2c3e50", fg="#ecf0f1")
    title_label.pack(pady=10)
    
    tasks = [
        {"task": "–ó–∞–≤–¥–∞–Ω–Ω—è 1: –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫", "time": "2025-03-29 08:00", "button_text": "–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"},
        {"task": "–ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ–¥–∫–∞—Å—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é", "time": "2025-03-28 08:00", "button_text": "–ü—Ä–æ–ø—É—â–µ–Ω–æ"},
        {"task": "–ó–∞–≤–¥–∞–Ω–Ω—è 3: –ù–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –Ω–∞ 300 —Å–ª—ñ–≤ - –í–∏–∫–æ–Ω–∞–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–æ 10 –≥—Ä—ñ–¥–∏–∫—ñ–≤", "time": "2025-03-27 08:00", "button_text": "–í–∏–∫–æ–Ω–∞–Ω–æ"}
    ]
    
    for task in tasks:
        task_time = datetime.strptime(task["time"], "%Y-%m-%d %H:%M")
        task_label = tk.Label(notifications_window, text=f"{task['task']} - {task_time.strftime('%H:%M %d-%m-%Y')}", font=("Helvetica", 12), fg="#ecf0f1", bg="#2c3e50")
        task_label.pack(pady=5)

        task_button = tk.Button(notifications_window, text=task["button_text"], command=lambda t=task: handle_task_button(t), bg="#2980b9", fg="white")
        task_button.pack(pady=5)

    close_button = tk.Button(notifications_window, text="–ó–∞–∫—Ä–∏—Ç–∏", command=notifications_window.destroy, bg="#e74c3c", fg="white")
    close_button.pack(pady=10)

def handle_task_button(task):
    if task["button_text"] == "–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É":
        file_path = filedialog.askopenfilename(title="–í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª", filetypes=(("–¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏", "*.txt"), ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")))
        if file_path:
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", f"–§–∞–π–ª {file_path} –¥–æ–¥–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏!")
    elif task["button_text"] == "–ü—Ä–æ–ø—É—â–µ–Ω–æ":
        show_message("–¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    elif task["button_text"] == "–í–∏–∫–æ–Ω–∞–Ω–æ":
        show_message("–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–æ 10 –≥—Ä—ñ–¥–∏–∫—ñ–≤!")

def show_profile_window():
    profile_window = tk.Toplevel(app)
    profile_window.title("–ü—Ä–æ—Ñ—ñ–ª—å")
    profile_window.config(bg="#2c3e50")
    profile_window.geometry("500x300")

    title_label = tk.Label(profile_window, text="–í–∏–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤", font=("Helvetica", 14, "bold"), bg="#2c3e50", fg="#ecf0f1")
    title_label.pack(pady=10)

    interests_label = tk.Label(profile_window, text="–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏:", font=("Helvetica", 12), bg="#2c3e50", fg="#ecf0f1")
    interests_label.pack(pady=10)

    interests = ["–ß–∏—Ç–∞–Ω–Ω—è", "–°–ø–æ—Ä—Ç", "–ú—É–∑–∏–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–ú–∞–Ω–¥—Ä–∏", "–Ü–≥—Ä–∏"]
    selected_interests = {}

    for interest in interests:
        var = tk.BooleanVar()
        chk = tk.Checkbutton(profile_window, text=interest, font=("Helvetica", 12), bg="#2c3e50", fg="#ecf0f1",
                             variable=var, selectcolor="#2c3e50")
        chk.pack(anchor="w", padx=20)
        selected_interests[interest] = var

    def save_profile():
        chosen_interests = [interest for interest, var in selected_interests.items() if var.get()]
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", f"–í–∏ –æ–±—Ä–∞–ª–∏: {', '.join(chosen_interests)}")

    save_button = tk.Button(profile_window, text="–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", font=("Helvetica", 14), fg="white", bg="#2980b9", command=save_profile)
    save_button.pack(pady=20)


app = tk.Tk()
app.title("OffGrid - –§–æ—Ä–º—É–π –∫–æ—Ä–∏—Å–Ω—ñ –∑–≤–∏—á–∫–∏")
app.geometry("720x750")
app.config(bg="#2c3e50")

header = tk.Label(app, text="OffGrid", font=("Helvetica", 32, "bold"), bg="#2C3E50", fg="white", pady=30)
header.pack(fill="both")

tab_control = ttk.Notebook(app)

tab_about = tk.Frame(tab_control, bg="#2c3e50")
tab_tasks = tk.Frame(tab_control, bg="#2c3e50")
tab_challenges = tk.Frame(tab_control, bg="#2c3e50")
tab_learning = tk.Frame(tab_control, bg="#2c3e50")
tab_content = tk.Frame(tab_control, bg="#2c3e50")
tab_shop = tk.Frame(tab_control, bg="#2c3e50")

tab_control.add(tab_about, text="–ü—Ä–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫")
tab_control.add(tab_tasks, text="–ó–∞–≤–¥–∞–Ω–Ω—è")
tab_control.add(tab_challenges, text="–ú–∞—Ä–∞—Ñ–æ–Ω–∏")
tab_control.add(tab_learning, text="–ù–∞–≤—á–∞–Ω–Ω—è")
tab_control.add(tab_content, text="–ö–æ–Ω—Ç–µ–Ω—Ç")
tab_control.add(tab_shop, text="–ú–∞–≥–∞–∑–∏–Ω")

tab_control.pack(expand=1, fill="both")

def create_section_in_tab(tab, title, description, target_tab):
    section_frame = tk.Frame(tab, padx=20, pady=20, relief="flat", bd=0, bg="#34495e", width=500)
    section_frame.pack(padx=20, pady=15, fill="both", expand=True)

    section_title = tk.Label(section_frame, text=title, font=("Helvetica", 20, "bold"), bg="#34495e", fg="white")
    section_title.pack()

    section_desc = tk.Label(section_frame, text=description, font=("Helvetica", 12), bg="#34495e", fg="#ecf0f1", wraplength=440)
    section_desc.pack()

    link_button = tk.Button(tab, text=f"–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∫–ª–∞–¥–∫–∏ {title}", font=("Helvetica", 14), fg="#2980b9", bg="#34495e", command=lambda: show_message("Soon"))
    link_button.pack(pady=10)

create_section_in_tab(tab_about, "–ü—Ä–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", 
                "OffGrid ‚Äî —Ü–µ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ –≥–µ–π–º—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞, —è–∫–∞ –ø—Ä–æ—Ç–∏–¥—ñ—î –≤—ñ–¥–≤–æ–ª—ñ–∫–∞–Ω–Ω—é –¥–æ—Ñ–∞–º—ñ–Ω—É –≤—ñ–¥ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≤–º—ñ—Å—Ç—É, –æ–¥–Ω–æ—á–∞—Å–Ω–æ —Å–ø—Ä–∏—è—é—á–∏ –∑–∞–ª—É—á–µ–Ω–Ω—é, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –Ω–∞–≤—á–∞–Ω–Ω—é. –ú–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—Ç—Ä–∞—á–µ–Ω–∏–π —á–∞—Å –Ω–∞ —è–∫—ñ—Å–Ω—É –æ—Å–≤—ñ—Ç—É.", tab_about)
create_section_in_tab(tab_challenges, "–ú–∞—Ä–∞—Ñ–æ–Ω–∏", 
                "–î–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ —á–µ–ª–µ–Ω–¥–∂—ñ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü—ñ—ó. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —á–∏—Ç–∞—Ç–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –∞–±–æ —á–∏—Ç–∞—Ç–∏ —â–æ–¥–Ω—è –ø–æ 30 —Ö–≤–∏–ª–∏–Ω.", tab_challenges)
create_section_in_tab(tab_learning, "–ù–∞–≤—á–∞–Ω–Ω—è", 
                "–í—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏, —â–æ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.", tab_learning)
create_section_in_tab(tab_content, "–û—Å–≤—ñ—Ç–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç", 
                "–¶—ñ–∫–∞–≤—ñ –≤—ñ–¥–µ–æ —Ç–∞ —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–∫—É. –ó–∞–º—ñ–Ω–∞ –±–µ–∑–¥—É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–æ—Ü–º–µ—Ä–µ–∂ –Ω–∞ –∫–æ—Ä–∏—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.", tab_content)
create_section_in_tab(tab_shop, "–ú–∞–≥–∞–∑–∏–Ω", 
                "", tab_content)
def add_file_for_review():
    file_path = filedialog.askopenfilename(title="–í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª", filetypes=(("–¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏", "*.txt"), ("–í—Å—ñ —Ñ–∞–π–ª–∏", "*.*")))
    if file_path:
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", f"–§–∞–π–ª {file_path} –¥–æ–¥–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏!")
def create_task_section(tab, task_title, task_description, is_completed=False):
    section_frame = tk.Frame(tab, padx=20, pady=20, relief="flat", bd=0, bg="#34495e", width=500)
    section_frame.pack(padx=20, pady=15, fill="both", expand=True)

    section_title = tk.Label(section_frame, text=task_title, font=("Helvetica", 20, "bold"), bg="#34495e", fg="white")
    section_title.pack()

    section_desc = tk.Label(section_frame, text=task_description, font=("Helvetica", 12), bg="#34495e", fg="#ecf0f1", wraplength=440)
    section_desc.pack()

    if is_completed:
        status_label = tk.Label(section_frame, text="–í–∏–∫–æ–Ω–∞–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–æ 10 –≥—Ä—ñ–¥–∏–∫—ñ–≤", font=("Helvetica", 12, "italic"), bg="#34495e", fg="#2ecc71")
        status_label.pack(pady=5)
    else:
        if task_title == "–ó–∞–≤–¥–∞–Ω–Ω—è 1: –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫":
            add_file_button = tk.Button(section_frame, text="–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É", font=("Helvetica", 14), fg="white", bg="#2980b9", command=add_file_for_review)
            add_file_button.pack(pady=10)

create_task_section(tab_tasks, "–ó–∞–≤–¥–∞–Ω–Ω—è 1: –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 10 —Å—Ç–æ—Ä—ñ–Ω–æ–∫", "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ 30 —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–Ω–∏–∂–∫–∏, —â–æ–± –≤—Å—Ç–∏–≥–Ω—É—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —ó—ó –¥–æ –ª—ñ—Ç–∞.")
create_task_section(tab_tasks, "–ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ–¥–∫–∞—Å—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é", "–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ–¥–∫–∞—Å—Ç Eliezer Yudkowsky: Dangers of AI and the End of Human Civilization")
create_task_section(tab_tasks, "–ó–∞–≤–¥–∞–Ω–Ω—è 3: –ù–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –Ω–∞ 300 —Å–ª—ñ–≤", "–ù–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –Ω–∞ 300 —Å–ª—ñ–≤ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–∏—Å—å–º–æ–≤–∏—Ö –Ω–∞–≤–∏—á–æ–∫.", is_completed=True)

notification_icon = tk.Label(app, text="üîî", font=("Helvetica", 24), bg="#2c3e50", cursor="hand2")
notification_icon.place(x=500, y=5)

notification_dot = tk.Label(app, text="‚óè", font=("Helvetica", 14), fg="red", bg="#2c3e50")
notification_dot.place(x=520, y=10)

def mark_notifications_as_read():
    notification_dot.place_forget()

notification_icon.bind("<Button-1>", lambda e: [show_notifications(), mark_notifications_as_read()])

profile_button = tk.Button(app, text="–ü—Ä–æ—Ñ—ñ–ª—å", font=("Helvetica", 14), bg="#2980b9", fg="white", command=show_profile_window)
profile_button.place(x=550, y=10)

footer = tk.Frame(app, bg="#34495e", pady=15)
footer.pack(side="bottom", fill="x")

footer_label = tk.Label(footer, text="¬© 2025 OffGrid. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.", fg="white", font=("Helvetica", 10), bg="#34495e")
footer_label.pack()

app.mainloop()
